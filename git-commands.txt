A. Register/Deregister Authour Details
01. git config --global user.name "Author Name"
02. git config --global user.email "email id of github account"
03. git config --list
04. git config --global --unset user.name
05. git config --global --unset user.email




B. When we are cloning remote repo (github repo)
06. git clone - cloning a repo on our local machine
            git clone link_of_project
07. git status - it use to check status of project
            git status
                (if upto date then it will show 'nothing to commit')
                (if something to commit then it will show M (modified) in front of file and needs to commit and status will ask for add & commit and then if we create a file within a project then git status will show U (untracked) means git is not tracking that file)
                statuses of files : 
                    1. untracked - new file that git doesn't track yet (not commited file to git)
                    2. modified - something changed in tracked file
                    3. staged - added and ready to commit
                    4. unmodified - unchanged
08. git add - add and changed files in your working directory to the git staging area
            git add file_name OR everything to add use git add .
            (file with red font need to add)
09. git commit - it is the record of change in git
            git commit -m "some message"
            (file with green font need to commit)
10. git push - only after committing on local machine it doesn't make changes on github. So to make those changes happen we use git push
            git push origin main
                git push - we know
                origin - by default git repos are called as remote repos. and the repo we clone previously these changes to reflet there

    Steps = 1. create an repo on github with README.md and copy the elink of than repo
            2. get in the folder where we want to clone the git repo
            3. use 'git clone link_of_project'



C. When we want to push our local folder to git
if we want to make new folder or directly we can check if it is git repo by typing ls -a (if .git present then it will be a git repo otherwise we want to make it) 
so to make it git repo : 
11. git init - after using this command in folder our folder will become git repo (we can check it by using ls -a)
12. git add - to add files (git add file_name OR everything to add use git add .)
13. git commit - to commit files (git commit -m "some message")
    after committing, create a repo on github.com
14. git remote add origin link - it used to tell to github that we want to add new repo / remote
                                (origin - we can give other name instead of origin but if we give other name, then at the time of push we have to give that name, as we saw in 10th command)
                                (link - copy the link of the git repo)
15. git remote -v - it shows the remote we added (from 14) is now present with name. and the repo we got that will be pushed to git
16. git branch -  It shows on which branch we are on
        (we will see more about branch but just to get idea of branch - On project one team is working on frontend, second team is working on backend and third team is working on bug fix, then they make clone of repos of their concerned branch and work on it)
17. git branch -M main - as we know we are on master branch, but name master is not in used in git any more so to rename it we use this command
18. git push -u origin main - use to push our project on git 
                              -u = use when we want to work on this repo and dont want to use origin again again on same repo (we can even use 'git push origin main' , but at time of push we need to use 'origin main' always)
19. we can add readme.md then
    Steps = 1. get in the folder where we want to clone the git repo
            2. use 'git init'
            3. use 'git status' to check status
            4. use 'git remote add origin "link"'
            5. use 'git remote -v'
            6. use 'git branch' to see on which branch we are on
            7. use 'git branch -M main'
            8. use 'git push -u origin main'



D. Git branch
20. git branch - to check the branch
21. git branch -M main - to rename the branch (we can put anything in lace of main)
22. git checkout branch_name - to go to another branch
23. git checkout -b new_branch_name - to create new branch
24. git branch -d branch_name - to delete branch (we can't delete branch in which we are currently working)
example - 
    to create branch - git branch => (main)
                       git checkout -b feature1 => (feature1 branch created)
                       git branch => (feature1)
                       git add . => to add branch in our git
                       git commit -m "message' => commit will happen
                       git push => to push feature1 on git
                       when we add any content while using branch feature1 in out file then it will be only for feature branch and if we git checkout main, this added things from feature 1 wont reflect for main branch, so to bring out those changes in main branch we have to make sure sure that we are on feature1 branch by using cmd git checkout feature1 then run,
                       git push origin feature1 => pushing changes to feature1 branch
                       go to github, it will show "compare and pull request" (it will merge feature1 with main), also we can see check branches there on which feature1 branch updates wont reflected in main branch. So to merge feature1 with main, there are 2 ways,
                       way 1 : 
                       git diff branch_name => it will compare 2 files, commits, branches (if we use this from feature1, it will show feature1 is ahead of main branch becasue we have added content from feature1 branch)
                       git merge main = it will merge feature 1 with main
                       way 2 :
                       create a PR - it is Pull Request, developers want to deploy their changes with project with main branch then this can be done in industires, if you make pull request, senior engineers will decide whether accept this pull request or not, and as they accept out feature1 branch will get reflected in main in git.
                       But in our code editor of local machine that feature1's code doesn't get reflected yet,becasue changes happened at git and not on local, so to bring that git changes on local use command, 
                       git pull origin main => it will bring changes of git on local
    to delete branch - git branch => (feature1)
     (from above)      git checkout -b feature2 => (feature2 branch created)
                       git branch => (feature2)
                       git checkout main or feature1 => main or feature1
                       git branch -d feature2 => it will delete the branch from project

E. Log
25. git log - It shows the list of commit we performed till now. This shows a list of commits in reverse chronological order with details like commit hash, author, date, and commit message.
26. git log --oneline  -  One commit per line (short hash and message)
27. git log --graph  -	Shows a visual graph of the commit history
28. git log --all  - 	Shows log from all branches
29. git log -p  -	Shows the diff introduced in each commit
30. git log --stat  -	Shows stats about what changed in each commit
(NOTE : to quit from log press 'q')

F. Delete file from both local machine and git repo
git rm file_name_with_extention - it will delete file from both local machine and git repo
git commit -m "Deleted example.txt" - then after deleting we have to commit the delete
git push - push this chnage to git

G. Delete file from only from git repo
git rm --cached file_name_with_extention - it will delete file from git but not from local machine
git commit -m "Stop tracking secret.txt" - after deleting from there, commit the changes
git push - push the change to git

H. Put file .gitignore for a file that should not be tracked by git
git rm --cached file_name_with_extention - it will delete file from git but not from local machine
echo file_name_with_extention >> .gitignore - it will add a file in .gitignore
git add .gitignore - staged/add .gitignore
git commit -m "added ignore.txt to .gitignore" - commit the changes
git push - to push in git

I. Resolving merge conflict
An event take place when git unable to automatically resolve differences in code between two commits.
suppose : 
from main branch we added something in file, then add and commit (e.g. <p>this is feature1 added to understand git branch (button)</p>)
then we checkout to feature1 and did added something on same place but different content , then add and commit (e.g. <p>this is feature1 added to understand git branch (dropdown)</p>)
and checked difference of current branch with main i.e.
git diff main - it will show difference, and shows in main branch (button ) was added and in feature1 you deleted that button and added (dropdown).
now merge with CLI method or with Pull Request (we will use CLI method here)
currently we are on feature1 branch, and write
git merge main - it will show error. In this case we have to manually resolve the merge conflict
                in code editor, it shows a line with green line which is for HEAD(current branch) and blue line with another conflicted branch
                Accept current change - to accept the code of current branch
                Accept incoming changes - to accept the code of branch with whom code is conflicted
                Accept both changes - to accept the both changes
                also, we can do this manually by deleting <<<<<<< HEAD , =======, >>>>>>> main
                then,
                to keep code of current branch (feature1) = delete the code of main branch
                or to keep code of main branch (main) = delete the code of feature1 branch
                or to keep the both = dont change anything
save the change
add the file
then commit
then check the diff with main = we will still have 1 change more than main change (i.e. these doesn't get updated yet in main branch)
then checkout for main branch = git checkout main
so to merge this with main = git merge feature1
now main branch has got the changes from feature1
git push

J. Undo changes
Type 1. - A change that we added
It is the case when, we have to undo the thing that we have added(staged) and want to go back, then,
so from main branch, 
    1. to reset changes in specific file we can use - git reset file_name
    2. to reset changes in changes in all files - git reset
then, terminal will reset the changes, and show these changes are unstaged 
then, if we check status if will show, file is modified and not added yet (it goes back from staged to unstaged)

Type 2. - A change that we commit (for single commit)
if we have deleted something and performed add and commit
then we checked the status - it will show our branch is 1 commit ahead (means on github deleted change is present but not here in code editor)
to reset that commit,
git reset HEAD~1 = HEAD~1 means we save all the commits internally in git that we have performed till yet, and the latest commit is HEAD so it will reset the HEAD by 1, and the commit before this deleted HEAD will become HEAD
Now after this, our file will be in unstaged mode 

Type 3. - A change that we commit (for multiple commit)
to reset the commit after multiple commits
suppose - commit 1 -> commit 2 -> commit 3 -> commit 4(HEAD)
now we want to go back to back to commit 2 (to change HEAD from commit 4 to commit 2) then use,
git reset hash_code = it will only remove changes from git
git reset --hard hash_code = it will only remove changes from git and vscode both
we will get hash_code, by git log, and enter the hash_code of the commit to which we want to reset 
now if we check git status, it will show commit 2 as HEAD now
and if git status shows, Your branch is behind 'origin/main' by 2 commits, and can be fast-forwarded. (use "git pull" to update your local branch) and if we use git pull then we will reset the thing that we currently resetted.
In these kind case code isn't updated on github , then use 'git push origin HEAD --force' , it will bring changes on github code as well

K. Fork
A fork is a new repo that shared code and visibility settings with the originl "upstream" repo
fork is a rough copy
if we want to work on repo of colleage, friend or to work opensource use fork
go to the project that we want to fork and click on the fork button
it will create fork, it will ask repo name , and Copy the master branch only(if we checked this then it will only fork master branch and if not then it will fork whole project )
Now we can see whole code of that project reflected on our github project
and for e.g. if we edited README.md and then commit changes then these changes will reflected on our forked project and not on, from which we forked
then we can create a pull request (from tab that present above and in side of code)